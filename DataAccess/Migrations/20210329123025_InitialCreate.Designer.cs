// <auto-generated />
using System;
using DataAccess.Concrete.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DataAccess.Migrations
{
    [DbContext(typeof(CarRentalContext))]
    [Migration("20210329123025_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Core.Entities.Concrete.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin"
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@example.com",
                            FirstName = "John",
                            IsBlocked = false,
                            LastName = "Doe",
                            PasswordHash = new byte[] { 25, 78, 12, 92, 111, 47, 220, 165, 88, 193, 137, 155, 106, 86, 184, 96, 229, 59, 65, 45, 136, 21, 33, 31, 201, 28, 45, 161, 102, 190, 63, 226, 118, 235, 61, 204, 166, 132, 91, 17, 74, 128, 161, 200, 57, 131, 214, 187, 25, 6, 45, 7, 94, 201, 113, 22, 27, 221, 109, 204, 248, 51, 173, 142 },
                            PasswordSalt = new byte[] { 135, 81, 181, 173, 15, 182, 157, 117, 198, 58, 203, 141, 46, 25, 114, 105, 105, 57, 189, 210, 36, 224, 140, 242, 133, 214, 125, 70, 33, 75, 131, 136, 213, 146, 255, 188, 25, 246, 68, 60, 251, 42, 176, 165, 32, 122, 1, 245, 207, 192, 98, 154, 243, 247, 90, 130, 139, 49, 220, 148, 20, 187, 65, 25, 107, 37, 178, 247, 229, 186, 133, 213, 242, 206, 40, 158, 242, 243, 213, 181, 102, 79, 2, 147, 47, 242, 183, 138, 146, 113, 93, 70, 26, 22, 157, 122, 37, 126, 136, 251, 21, 248, 112, 135, 136, 24, 183, 19, 145, 230, 35, 248, 182, 47, 45, 201, 76, 209, 251, 241, 171, 69, 254, 128, 239, 61, 167, 47 }
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OperationClaimId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Brand", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Name = "TOGG"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<short>("BrandId")
                        .HasColumnType("smallint");

                    b.Property<short>("ColorId")
                        .HasColumnType("smallint");

                    b.Property<decimal>("DailyPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("ModelYear")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ColorId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = (short)1,
                            ColorId = (short)1,
                            DailyPrice = 250m,
                            Description = "TOGG SUV model kırmızı",
                            ModelYear = (short)2022,
                            Name = "SUV"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = (short)1,
                            ColorId = (short)2,
                            DailyPrice = 250m,
                            Description = "TOGG SUV model mavi",
                            ModelYear = (short)2022,
                            Name = "SUV"
                        },
                        new
                        {
                            Id = 3,
                            BrandId = (short)1,
                            ColorId = (short)3,
                            DailyPrice = 200m,
                            Description = "TOGG Sedan gri",
                            ModelYear = (short)2022,
                            Name = "Sedan"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.CarImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CarId")
                        .HasColumnType("integer");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("CarImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarId = 1,
                            FileName = "9c51a451-ac2b-4840-81cb-e9447bf97441.jpg",
                            UploadDate = new DateTime(2021, 3, 29, 15, 30, 24, 811, DateTimeKind.Local).AddTicks(5678)
                        },
                        new
                        {
                            Id = 2,
                            CarId = 1,
                            FileName = "62343bd3-b600-4911-ba92-a3e92460c91b.jpg",
                            UploadDate = new DateTime(2021, 3, 29, 15, 30, 24, 812, DateTimeKind.Local).AddTicks(6591)
                        },
                        new
                        {
                            Id = 3,
                            CarId = 1,
                            FileName = "e855898a-5e19-4e9e-82fa-421a884b353a.jpg",
                            UploadDate = new DateTime(2021, 3, 29, 15, 30, 24, 812, DateTimeKind.Local).AddTicks(6635)
                        },
                        new
                        {
                            Id = 4,
                            CarId = 1,
                            FileName = "f16ec7fb-bcfa-49b6-accc-87e92b6d3cc3.jpg",
                            UploadDate = new DateTime(2021, 3, 29, 15, 30, 24, 812, DateTimeKind.Local).AddTicks(6637)
                        },
                        new
                        {
                            Id = 5,
                            CarId = 2,
                            FileName = "3fa88654-2976-4cff-948c-e3e20c730c91.jpg",
                            UploadDate = new DateTime(2021, 3, 29, 15, 30, 24, 812, DateTimeKind.Local).AddTicks(6639)
                        },
                        new
                        {
                            Id = 6,
                            CarId = 2,
                            FileName = "7a6f413f-0d74-4584-89a2-ff7898a8623d.jpg",
                            UploadDate = new DateTime(2021, 3, 29, 15, 30, 24, 812, DateTimeKind.Local).AddTicks(6640)
                        },
                        new
                        {
                            Id = 7,
                            CarId = 2,
                            FileName = "2135828c-09f7-4c6a-a5df-3a137c9a138a.jpg",
                            UploadDate = new DateTime(2021, 3, 29, 15, 30, 24, 812, DateTimeKind.Local).AddTicks(6642)
                        },
                        new
                        {
                            Id = 8,
                            CarId = 2,
                            FileName = "ee9d8d7e-d89b-4d70-b012-4aa241fca70a.jpg",
                            UploadDate = new DateTime(2021, 3, 29, 15, 30, 24, 812, DateTimeKind.Local).AddTicks(6643)
                        },
                        new
                        {
                            Id = 9,
                            CarId = 3,
                            FileName = "33959098-8427-4200-bd6e-823c2890ff10.jpg",
                            UploadDate = new DateTime(2021, 3, 29, 15, 30, 24, 812, DateTimeKind.Local).AddTicks(6645)
                        },
                        new
                        {
                            Id = 10,
                            CarId = 3,
                            FileName = "c300ab97-d45f-439c-90b8-fd09a9426cc4.jpg",
                            UploadDate = new DateTime(2021, 3, 29, 15, 30, 24, 812, DateTimeKind.Local).AddTicks(6646)
                        },
                        new
                        {
                            Id = 11,
                            CarId = 3,
                            FileName = "2cca89e4-a7a4-44fe-b8ac-f50872a1395b.jpg",
                            UploadDate = new DateTime(2021, 3, 29, 15, 30, 24, 812, DateTimeKind.Local).AddTicks(6648)
                        },
                        new
                        {
                            Id = 12,
                            CarId = 3,
                            FileName = "af969d12-5a14-488d-8509-796efb2bd0b3.jpg",
                            UploadDate = new DateTime(2021, 3, 29, 15, 30, 24, 812, DateTimeKind.Local).AddTicks(6649)
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Color", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Name = "Kırmızı"
                        },
                        new
                        {
                            Id = (short)2,
                            Name = "Mavi"
                        },
                        new
                        {
                            Id = (short)3,
                            Name = "Gri"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Customer", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CompanyName = "AGCA"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Rental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CarId")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Rentals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarId = 2,
                            CustomerId = 1,
                            RentDate = new DateTime(2021, 4, 3, 15, 30, 24, 831, DateTimeKind.Local).AddTicks(1659)
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.UserOperationClaim", b =>
                {
                    b.HasOne("Core.Entities.Concrete.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Concrete.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.Car", b =>
                {
                    b.HasOne("Entities.Concrete.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.CarImage", b =>
                {
                    b.HasOne("Entities.Concrete.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.Customer", b =>
                {
                    b.HasOne("Core.Entities.Concrete.User", "User")
                        .WithOne()
                        .HasForeignKey("Entities.Concrete.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.Rental", b =>
                {
                    b.HasOne("Entities.Concrete.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
